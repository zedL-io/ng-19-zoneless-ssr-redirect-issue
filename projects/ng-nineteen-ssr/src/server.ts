import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import crypto from 'node:crypto';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

// app.get('/', (req, res) => {
//   res.redirect('/home');
// });

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application. (with CSP!)
 */
app.use('/**', async (req, res, next) => {
  try {
    // handle request by angular
    let response = await angularApp.handle(req);

    // check if response exists
    if (response) {
      // create a nonce
      const nonce = crypto
        .randomBytes(16)
        .toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');

      // Extract the HTML generated by angular
      let html = await response.text();

      // Add nonce to <script> and <style> tags
      html = html.replace(/<(script|style)(.*?)>/g, (match, tag, attrs) => {
        return `<${tag} nonce="${nonce}"${attrs}>`;
      });

      // Set the Content-Security-Policy header
      const cspHeader = [
        "default-src 'self';",
        `script-src 'self' 'nonce-${nonce}';`,
        `style-src 'self' 'nonce-${nonce}';`,
        "img-src 'self' data:;",
        "connect-src 'self' https://api.example.com;",
        "frame-src 'self' https://identity-provider.com;",
        "object-src 'none';",
        "base-uri 'self';",
        "form-action 'self';",
      ]
        .join(' ')
        .replace(/\s+/g, ' ');

      res.setHeader('Content-Security-Policy', cspHeader);

      const newResponse = new Response(html, {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers,
      });
      writeResponseToNodeResponse(newResponse, res);
    } else {
      next();
    }
  } catch (error) {
    next(error);
  }
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);
